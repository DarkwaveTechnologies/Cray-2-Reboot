//********************************************
//  TESTBENCH SCALAR INTEGER FUNCTIONAL UNIT
//********************************************
// DESCRIPTION: Testbench for the Scalar Integer Functional Unit
// 
//

module scalar_integer_fu_tb;
 //Inputs to DUT
 reg [63:0] i_Sj;  //Aj register (input)
 reg [63:0] i_Sk;  //Ak register (input)
 reg [6:0] i_Instr;//Instr register (input) 
 reg clk;          //Clock signal (input)

 //Output from DUT
 wire [63:0] o_Si; //Ai register (output)
  
 //Initialize DUT
 scalar_integer_fu test_scalar_integer_fu(i_Sj, i_Sk, i_Instr, clk, o_Si);  
   
 //Generate 50Mhz clock 
 initial
  begin
   clk=0; //Initialize clock
   forever
    begin
     #10 clk = ~ clk; // Clock cycle
    end
  end  
  
 //Temp registers & variables
 int i; //Temp counter
  
 //Initialize values
 initial begin
  i_Sj = 64'b0;
  i_Sk = 64'b0;
  i_Instr = 7'o0;
 end
 
 //Cycle through test cases
  always @(posedge clk)
  begin
    $display("\t****\tTEST BENCH START\t****\t");
    $display("\t****\tStart sum test\t****\t");
    for (i=0; i<65; i=i+1)
    begin
     i_Sj = 1;
     i_Sk = 2**i-1;
     i_Instr = 7'o104; //104'o (h44), sum Sj + Sk.
     @(posedge clk);
     #30 $display("\tT=%0d, Inst=%0o, Sj=%0d, Sk=%0d, Si=%0d",$time, i_Instr,i_Sj,i_Sk,o_Si); 
    end
    for (i=0; i<65; i=i+1)
    begin
     i_Sj = 1;
     i_Sk = 2**i;
     i_Instr = 7'o104; //104'o (h44), sum Sj + Sk.
     @(posedge clk);
     #30 $display("\tT=%0d, Inst=%0o, Sj=%0d, Sk=%0d, Si=%0d",$time, i_Instr,i_Sj,i_Sk,o_Si); 
    end
    $display("\t****\tFinish sum test\t****\t");  
    $display("\t****\tStart difference test\t****\t");
    for (i=0; i<65; i=i+1)
    begin
     i_Sj = 2**64-1;
     i_Sk = 2**i-1;
     i_Instr = 7'o105; //105'o (h45), sum Sk + Sj.
     @(posedge clk);
     #30 $display("\tT=%0d, Inst=%0o, Sj=%0d, Sk=%0d, Si=%0d",$time, i_Instr,i_Sj,i_Sk,o_Si); 
    end
    for (i=0; i<65; i=i+1)
    begin
     i_Sj = 2**64-1;
     i_Sk = 2**i;
     i_Instr = 7'o105; //105'o (h45), sum Sk + Sj.
     @(posedge clk);
     #30 $display("\tT=%0d, Inst=%0o, Sj=%0d, Sk=%0d, Si=%0d",$time, i_Instr,i_Sj,i_Sk,o_Si); 
    end
    $display("\t****\tFinish difference test\t****\t");  
    $display("\t****\tStart population test\t****\t");
    for (i=0; i<65; i=i+1)
    begin
     i_Sj = 2**i-1;
     i_Sk = 0;
      i_Instr = 7'o106; //106'o (h46), Sk=0 performs a population count of Sj.
     @(posedge clk);
     #30 $display("\tT=%0d, Inst=%0o, Sj=%b, Sk=%0d, Si=%0d",$time, i_Instr,i_Sj,i_Sk,o_Si); 
    end
    for (i=0; i<65; i=i+1)
    begin
     i_Sj = 2**i;
     i_Sk = 0;
     i_Instr = 7'o106; //106'o (h46), Sk=0 performs a population count of Sj.
     @(posedge clk);
     #30 $display("\tT=%0d, Inst=%0o, Sj=%b, Sk=%0d, Si=%0d",$time, i_Instr,i_Sj,i_Sk,o_Si); 
    end
    $display("\t****\tFinish population test\t****\t");  
    $display("\t****\tStart parity test\t****\t");
    for (i=0; i<65; i=i+1)
    begin
     i_Sj = 2**i-1;
     i_Sk = 1;
     i_Instr = 7'o106; //106x'o (h46), sk=1 performs a parity of Sj.
     @(posedge clk);
     #30 $display("\tT=%0d, Inst=%0o, Sj=%b, Sk=%0d, Si=%0d",$time, i_Instr,i_Sj,i_Sk,o_Si);
    end  
    for (i=0; i<65; i=i+1)
    begin
     i_Sj = 2**i;
     i_Sk = 1;
     i_Instr = 7'o106; //106x'o (h46), sk=1 performs a parity of Sj.
     @(posedge clk);
     #30 $display("\tT=%0d, Inst=%0o, Sj=%b, Sk=%0d, Si=%0d",$time, i_Instr,i_Sj,i_Sk,o_Si);  
    end      
    $display("\t****\tFinish parity test\t****\t");
    $display("\t****\tStart leading zero count test\t****\t");
    for (i=0; i<65; i=i+1)
    begin
     i_Sj = 2**i-1;
     i_Sk = $urandom_range(512,0); //Sk is ignored
     i_Instr = 7'o107; //107'o (h47), counts the number of leading zeros in Sj.
     @(posedge clk);
     #30 $display("\tT=%0d, Inst=%0o, Sj=%b, Sk=%0d, Si=%0d",$time, i_Instr,i_Sj,i_Sk,o_Si);  
    end 
    for (i=0; i<65; i=i+1)
    begin
     i_Sj = 2**i;
     i_Sk = $urandom_range(512,0); //Sk is ignored
     i_Instr = 7'o107; //107'o (h47), counts the number of leading zeros in Sj.
     @(posedge clk);
     #30 $display("\tT=%0d, Inst=%0o, Sj=%b, Sk=%0d, Si=%0d",$time, i_Instr,i_Sj,i_Sk,o_Si);  
    end     
    $display("\t****\tFinish leading zero count test\t****\t");
    $display("\t****\tTEST BENCH FINISH\t****\t");
    $finish;
  end

 //Log output 
 initial begin
  $dumpfile ("dump.vcd"); 
  $dumpvars; 
 end 
endmodule